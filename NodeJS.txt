INSTALLING NODE

1.https://nodejs.org

2.Click -> Click - > Click -> Done


CHECK INSTALLATION

1.Open Termina/Command Prompt

2.node -v


INSTALL TEXT EDITOR

VS Code / Sublime Text / Atom


WHAT IS NODEJS?

1. Node.Js is a way to run JS code on the server side as oppose to be the original JS
    which only worked on client side ! Node.js is JS runtime built on Chrome's V8 engine ! 

2. Why Chrome V8(written in C++ thus making it very fast in compilation) because its fastest !
    A javascript engine is one which takes in JS code and converts it into machine code 
    which can be easily understood by the machine ! 

3. #Nodejs is not a programming language :D its runtime JS code ! Both Chrome and
    NodeJS are written in C++ ! which runs on V8 engine also written in C++

4. Some snippet are just NodeJS or Chrome specific ! 
    (browser)Chrome ->  window , document
    (server)Node.js -> global, process   


WHY USE NODEJS ?

 - Nodejs is a event-driven , non-blocking I/O model 	

 - Blocking Example :

// assume getData to be an API call
console.log("Getting Data1");
var data1 = getData('123');
console.log("Data is:", data1);

console.log("Getting Data2");
var data2 = getData('456');
console.log("Data is:", data2);

var sum = 1 + 2;
console.log("sum is:", sum);

Output :

Getting Data1
Data is: {“id” : 123, “name” : “sarwar”}
Getting Data2
Data is: {“id” : 456, “name” : “nirmala”}
sum is:3



- Non - blocking Example :

console.log("Getting Data1");
getData('123', function(data1) {
  console.log("Data is:", data1);
});

console.log("Getting Data2");
getData('456', function(data1) {
  console.log("Data is:", data1);
});

var sum = 1 + 2;
console.log("sum is:", sum);

Output :

Getting Data1
Getting Data2
sum is:3
Data is: {“id” : 123, “name” : “cool”}
Data is: {“id” : 456, “name” : “ayush”}


- The non-blocking form will get executed faster than the blocking form and hence
  code written in blocking form (in other languages) will take time than the one written
  above, hence the power of Nodejs non-blocking I/O mode kicks in.


NODE.JS MODULES

1. Core Modules

- Global

console.log() ,  fs, http

- Installed Modules

express , mongoose 

2. Third Party Modules

const validator = require('validator');
console.log(validator.isEmail('humza1mza.co'));   //false
console.log(validator.isURL('http//www.npmjs.com/package/validator'));    //false
console.log(validator.isDivisibleBy('1234',4));     //false


const chalk = require('chalk');
console.log(chalk.green("Success !!!"));
console.log(chalk.bold.underline.bgRed("Warning !"));
	


3. User Created Modules

App.js
const name = "Humza";
const util = require('./util.js');
console.log(name);
console.log(util.loca);
console.log(util.add(5,5));

Util.js

console.log("Util Package");
var loca = "Kolkata";
const add = function(a , b) {
    return a+b;
}
module.exports = {
    add,
    loca
}


COMMAND LINE ARGUMENTS

console.log((process.argv));
const command = process.argv[2];
console.log(command);

if (command == 'add')
    console.log(chalk.green("Successfully Added !"));
else
    console.log(chalk.red('Please Retry !!'));




COMMAND LINE ARGUMENTS USING YARGS MODULE(NPM)

const yargs = require('yargs');

yargs.command({
    command : 'add',
    describe: 'Add a new note',
    handler  : function() {
        console.log("Adding new note")
    } 
})

yargs.command({
    command : 'remove',
    describe: 'Remove a note',
    handler : function() {
        console.log("Removing a note")
    }
})

yargs.command({
    command : 'read',
    describe: 'Read a note',
    handler : function() {
        console.log("Reading a note")
    }
})

yargs.command({
    command : 'list',
    describe: 'List all note',
    handler : function() {
        console.log("Listing all the notes")
    }
})


Output :

1. node app.js list  
    Listing all the notes
    { _: [ 'list' ], '$0': 'app.js' }


2. node app.js read
    Reading a note
    { _: [ 'read' ], '$0': 'app.js' }





ARROW FUNCTION IN EJS6

const square = function (x) {
    return x*x
}

const square = (x) => {
    return x*x
}


const square = (x) => x*x 

console.log(square(6))


HOW THE HELL TO DEBUG ?

1. console.log()

2. Debugger statment before the code you want to check, which pauses the flow of the 
program and you can dryrun the code in chrome://inspect which opens us the chrome devtools


WHAT IS ASYNCHRONOUS ?

Synchronous :

console.log("SYNC Program Starts");
console.log("DB value fetched !!");
console.log("SYNC Program Ends");

OUTPUT :

SYNC Program Starts
DB value fetched !!
SYNC Program Ends

Asynchronous :


console.log("SYNC Program Starts");

setTimeout(function(){
    console.log("DB value fetched !!");
},2000)

console.log("SYNC Program Ends");

OUTPUT:

SYNC Program Starts
SYNC Program Ends
DB value fetched !!




ASYNCRONOUS NATURE EXPLAINED :

Consider the following program ----

console.log("Starting Up !!")

setTImeout (() => {
	console.log('Two Seconds !')
},2000 )

setTimeout(() => {
	console.log("Zero Second")
},2000 )


console.log("Finishing Up ")



In the control flow level of ASYNV Programming we have a CallStack, Node API Block
and Event Loop

Call Stack is responsilble for all the execution the program function by function in order. 
When a program starts to run the main() function is first added to the Call Stack.

The first console log get printed out then the next function of setTImeout is added to the 
call stack but since the function is not a JS function it goes to NODE API's block where it
starts to wait for the said amount of time !

when finished it goes to thr CALLBACK QUEUE where it with the help of EVENT LOOP
checks if the CALL STACK is empty or not, if not empty it waits for the Call Stack to get
 empty and executes post the CALL STACK is empty !




WEB SERVER :

- Express is a framework built on NodeJS

- It helps to manage rotes, request and views 


Install by : npm i express 


Getting Static Files :

Create a public folder and place all the static file in it, such as css, js , img and html files

and in app.js use the static file with the help of express

app.use(express.static(path.join(__dirname,'../public)))

Getting Dynamic Pages :

Create a views folder and place the code og the respective template engine in there 
such as your .ejs or .hbs files

and call set your view engine in app.js as follows,

app.set('view engine', 'hbs') or app.set('view engine', 'ejs ') 

**NOTE : when we want to get back file directly we use res.send or res,sendFile but
when you want to return a tempelate engine view user res.render()




##KILL SERVER :  C:\Windows\System32>taskkill /F /IM node.exe  use as admin 